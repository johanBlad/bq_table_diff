import json
import os
import subprocess
from typing import List

from typing import List, Literal
import json


DBT_LS_NO_MATCH_CHECK = "No nodes selected"


def dbt_name_for_resource_type(
    resource_dict_list: List[dict],
    resource_type: Literal["model", "test", "seed", "snapshot"],
) -> List[str]:
    """
    Takes a list of dicts where each dict is the parsed output of dbt ls --output json and a dbt resource type,
    and picks the name of each resource of the specified type
    """
    return [
        resource_dict["name"]
        for resource_dict in resource_dict_list
        if resource_dict["resource_type"] == resource_type
    ]


def dbt_name_for_incremental_models(resource_dict_list: List[dict]) -> List[str]:
    """
    Takes a list of dicts where each dict is the parsed output of dbt ls --output json,
    and picks the name of each resource and keeps only incremental models
    """
    return [
        resource_dict["name"]
        for resource_dict in resource_dict_list
        if resource_dict["resource_type"] == "model"
        and resource_dict["config"]["materialized"] == "incremental"
    ]


def parse_dbt_ls_json_output_file(filepath: str) -> List[dict]:
    """
    Parse dbt metadata from a file generated by `dbt ls -s ... --output json > myfile.txt`
    and return the contents as dictionaries.

    Args:
        filename: the file path or filename to parse

    Raises:
        Exception: if no model has been selected

    Returns:
        dict: model metadata dictionary
    """
    parsed_resources = []
    with open(filepath, "r") as f:
        for line in f.readlines():
            # only read lines indicating a dbt resource (e.g. exclude warnings)
            if not line or DBT_LS_NO_MATCH_CHECK in line:
                return []
            if '"resource_type":' in line.strip():
                resource_dict = json.loads(line)
                parsed_resources.append(resource_dict)
    return parsed_resources


def get_model_metadata(dbt_select: List[str]) -> List[dict]:
    """
    Get model metadata using the "dbt list" command for a dbt selector

    Args:
        dbt_select: list of strings that are passed into the `--select ...`
        clause of the dbt command

    Raises:
        Exception: if no model has been selected

    Returns:
        dict: model metadata dictionary
    """
    command = [
        "dbt",
        "-q",
        "list",
        "--select",
        *dbt_select,
        "--resource-type",
        "model",
        "--output",
        "json",
    ]
    print(f"Run: {' '.join(command)}")
    dbt_env = {
        **os.environ.copy(),
        "USE_DBT_PROFILE_FROM_HOME_FOLDER": "yes",
        "SANDBOX_SCHEMA_NAME": "DIFFREPORT",
    }
    working_dir = "dwh_dbt_elt"
    process = subprocess.run(
        command,
        capture_output=True,
        text=True,
        cwd=working_dir,
        env=dbt_env,
    )

    if process.returncode != 0:
        stdout = process.stdout
        stderr = process.stderr
        error_message = "failed to fetch model metadata!\n\n{}\n{}"
        raise Exception(error_message.format(stderr, stdout))

    if DBT_LS_NO_MATCH_CHECK in process.stdout:
        raise Exception(process.stdout)

    metadata_for_models = [
        json.loads(e)
        for e in process.stdout.split("\n")
        if e and '"resource_type": "model"' in e
    ]
    return metadata_for_models
